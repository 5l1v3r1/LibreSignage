/*
*  User manager implementation for LibreSignage.
*/

var APIEndpoints = require('ls-api').APIEndpoints;
var assert = require('ls-assert').assert;

class User {
	constructor(api) {
		assert(api != null, "API object can't be null.");

		this.api = api;
		this.data = null;
	}

	async load(user) {
		let resp = null;
		if (user == null) {
			resp = await this.api.call(
				APIEndpoints.USER_GET_CURRENT,
				null
			);
		} else {
			resp = await this.api.call(
				APIEndpoints.USER_GET,
				{'user': user}
			);
		}
		delete resp.error;
		this.data = resp.user;
	}

	async save() {
		assert(this.data != null, "User not loaded.");
		await this.api.call(
			APIEndpoints.USER_SAVE,
			{
				'user':   this.data.user,
				'groups': this.data.groups,
				'pass':   this.data.pass
			}
		);
	}

	async remove() {
		assert(this.data != null, "User not loaded.");
		await this.api.call(
			APIEndpoints.USER_REMOVE,
			{user: this.data.user}
		);
		this.data = null;
	}

	static async list_all(api) {
		let resp = await api.call(
			APIEndpoints.USERS_LIST,
			null
		);
		return resp.users;
	}

	static async get_all(api) {
		let users = {};
		let names = await User.list_all(api);
		for (let n of names ) {
			users[n] = new User(api);
			await users[n].load(n);
		}
		return users;
	}
}
exports.User = User;
