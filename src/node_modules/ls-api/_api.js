/*
*  LibreSignage API interface implementation. The interface is
*  implemented as a module so that it can be included using
*  require('libresignage-api'). The functions defined in this
*  module should be used to interface with the LibreSignage API.
*/

window.api = exports;

var $ = require('jquery');
var util = require('ls-util');
var cookie = require('ls-cookie');
var dialog = require('ls-dialog');
var endpoints = require('./endpoints.js');

const SESSION_RENEWAL_HEADROOM = 30;

exports.API = class API {
	constructor(config, callback) {
		this.CONFIG = {
			user: null,
			noui: 'noui' in config ? config['noui'] : false
		};

		this.ENDP = endpoints.ENDPOINTS;
		this.SERVER_LIMITS = null;
		this.ERR_MSGS = null;
		this.ERR = null;

		// Initialize the API interface.
		this.load_capabilities(() => {
			this.session_check(() => {
				console.log(`API: LS version: ${this.CONFIG.LS_VER}`);
				console.log(`API: API version: ${this.CONFIG.API_VER}`);
				if (callback) { callback(); }
			});
		});
	}

	call(endpoint, data, callback) {
		/*
		*  Call an API enpoint. The argument 'endpoint' should
		*  be one of the enpoints defined in this.ENDP. 'data'
		*  can be an object containing the data to send with the
		*  API request. The 'callback' argument can be a function
		*  that is called after the API call is complete. The
		*  parsed API response is passed to the callback as the
		*  first argument. Both 'data' and 'callback' can be
		*  left null if they are not needed.
		*/
		let ajax_settings = {
			url: `${endpoint.uri}`,
			method: endpoint.method,
			error: function(jqhxr, status, exception) {
				console.error(`API: XHR failed (status: ${status})`);
				callback({'error': this.ERR.API_E_INTERNAL});
			},
			success: function(data, status, jqxhr) {
				if (callback) { callback(data); }
			}
		};

		if (endpoint.method === 'POST') {
			ajax_settings.contentType = endpoint.req_mime;
			switch (endpoint.req_mime) {
				case 'application/json':
					ajax_settings.data = JSON.stringify(data);
					break;
				case 'application/x-www-form-urlencoded':
					ajax_settings.data = data;
					break;
				case 'multipart/form-data':
					ajax_settings.data = data;

					// Don't add Content-Type headers or process the data.
					ajax_settings.processData = false;
					ajax_settings.contentType = false;
					break;
				default:
					throw new Error(
						`Invalid endpoint MIME type ` +
						`'${endpoint.req_mime}'.`
					);
			}
		} else if (endpoint.method === 'GET') {
			ajax_settings.data = data;
		} else {
			throw new Error(
				`Invalid endpoint method '${endpoint.method}'.`
			);
		}

		if (endpoint.auth) {
			ajax_settings.headers = {
				'Auth-Token': cookie.get_cookie('session_token')
			};
		}
		$.ajax(ajax_settings);
	}

	handle_disp_error(err, callback) {
		var h = "";
		var p = "";

		if (err == 0) { return 0; }

		if (!this.ERR_MSGS) {
			h = "Error";
			p = "An error was encountered, but a more detailed " +
				"error description can't be shown because the " +
				"error messages haven't been loaded.";
		} else if (err in Object.keys(this.ERR_MSGS)) {
			h = this.ERR_MSGS[err].short;
			p = this.ERR_MSGS[err].long;
		} else {
			h = "Unknown error";
			p = `The server encountered an unknown error. (${err})`;
		}
		if (!this.CONFIG.noui) {
			dialog.dialog(dialog.TYPE.ALERT, h, p, callback);
		}
		console.error("API: " + p);
		return err;
	}

	load_capabilities(ready) {
		/*
		*  Load the API error codes, messages and the server limits.
		*  'ready' is called after the function is finished.
		*/
		var codes = new Promise((resolve,reject) => {
			this.call(this.ENDP.API_ERR_CODES, null, (resp) => {
				if (this.handle_disp_error(resp.error)) {
					reject(new Error(
						"Failed to load API error codes."
					));
				}
				this.ERR = resp.codes;
				resolve();
			});
		})
		var msgs = new Promise((resolve, reject) => {
			this.call(this.ENDP.API_ERR_MSGS, null, (resp) => {
				if (this.handle_disp_error(resp.error)) {
					reject(new Error(
						"Failed to load API error messages"
					));
				}
				this.ERR_MSGS = resp.messages;
				resolve();
			});
		});
		var limits = new Promise((resolve, reject) => {
			this.call(this.ENDP.SERVER_LIMITS, null, (resp) => {
				if (this.handle_disp_error(resp.error)) {
					reject(new Error(
						"Failed to load server limits"
					));
				}
				this.SERVER_LIMITS = resp.limits;
				resolve();
			});
		});
		var ver = new Promise((resolve, reject) => {
			this.call(this.ENDP.VER_INFO, null, (resp) => {
				if (this.handle_disp_error(resp.error)) {
					reject(new Error(
						"Failed to load version information."
					));
				}
				this.CONFIG.LS_VER = resp.ls;
				this.CONFIG.API_VER = resp.api;
				resolve();
			})
		});

		Promise.all([codes, msgs, limits, ver])
			.then(ready)
			.catch((error) => { throw error; });
	}

	session_schedule_renewal() {
		/*
		*  Schedule a session renewal just before the
		*  existing session expires.
		*/
		if (cookie.get_cookie('session_permanent') == '1') {
			console.log(
				"API: Won't schedule session renewal " +
				"for a permanent session."
			);
			return;
		}

		var created = parseInt(cookie.get_cookie('session_created'), 10);
		var max_age = parseInt(cookie.get_cookie('session_max_age'), 10);

		if (max_age <= SESSION_RENEWAL_HEADROOM) {
			throw new Error(
				"Session max_age too low. " +
				"(max_age <= SESSION_RENEWAL_HEADROOM)"
			);
		} else if (max_age <= SESSION_RENEWAL_HEADROOM + 10) {
			throw new Error(
				"Session max_age is so low that the " +
				"session would be renewed very often " +
				"causing a high load on the client and " +
				"server. Session renewal won't be scheduled."
			);
		}

		var left = created + max_age - Date.now()/1000;
		var t = left - SESSION_RENEWAL_HEADROOM;

		if (left <= 0) {
			this.session_remove();
			console.error(
				"API: Won't schedule session renewal because " +
				"the session is already expired."
			);
			return;
		} else if (t <= 0) {
			// Attempt to renew the session now.
			this.session_renew();
			return;
		}
		console.log("API: Session renewal in " + t + " seconds.");
		setTimeout(() => {
			this.session_renew();
		}, t*1000);
	}

	session_renew() {
		/*
		*  Renew the stored session.
		*/
		console.log("API: Renew session.");
		this.call(
			this.ENDP.AUTH_SESSION_RENEW,
			null,
			(resp) => {
				if (this.handle_disp_error(resp.error)) {
					console.error("API: Session renewal failed.");
					this.session_remove();
					return;
				}
				console.log("API: Session renewal complete.");
				this.session_schedule_renewal();
			}
		)
	}

	session_remove() {
		/*
		*  Remove the session data cookies.
		*/
		cookie.rm_cookie({"session_token": "", "path": "/"});
		cookie.rm_cookie({"session_created": "", "path": "/"});
		cookie.rm_cookie({"session_max_age": "", "path": "/"});
		cookie.rm_cookie({"session_permanent": "", "path": "/"});
	}

	session_fetch_data(ready) {
		/*
		*  Update the session data in this.CONFIG.user and
		*  this.CONFIG.session. 'ready' is called afterwards
		*  with the returned API error code as the first argument.
		*/
		this.call(
			this.ENDP.AUTH_GET_DATA,
			{},
			resp => {
				if (!resp.error) {
					this.CONFIG.user = resp.user;
					this.CONFIG.session = resp.session;
				}
				if (ready) { ready(resp.error); }
			}
		);
	}

	session_check(ready) {
		/*
		*  Check the authentication status of the API. This
		*  function also schedules a session renewal.
		*/
		console.log("API: Check authentication status.");
		if (
			cookie.cookie_exists('session_token')
			&& cookie.cookie_exists('session_created')
			&& cookie.cookie_exists('session_max_age')
		) {
			/*
			*  Fetch session data and check that the session is
			*  actually valid.
			*/
			this.session_fetch_data(err => {
				if (!err) {
					this.session_schedule_renewal();
				} else if (err == this.ERR.API_E_NOT_AUTHORIZED) {
					console.log('API: Session not valid.');
					this.session_remove();
				} else {
					this.handle_disp_error(err);
					return;
				}
				if (ready) { ready(); }
			});		
		} else {
			// Remove invalid cookies.
			console.log("API: No valid session data.");
			this.session_remove();
			if (ready) { ready(); }
		}
	}

	login(user, pass, perm, ready_callback) {
		/*
		*  Login using the supplied credentials and store the
		*  returned session data. ready_callback is called when
		*  the login is successfully finished.
		*/
		console.log("API: Authenticate");
		this.call(
			this.ENDP.AUTH_LOGIN,
			{
				username: user,
				password: pass,
				permanent: perm,
				who: "LibreSignage-Web-Interface"
			},
			(resp) => {
				if (!resp.error) {
					this.CONFIG.user = resp.user;
					this.CONFIG.session = resp.session;
					this.session_schedule_renewal();
				} else {
					console.error("API: Auth failed.");
					this.session_remove();
				}
				if (ready_callback) {
					ready_callback(resp);
				}
			}
		);
	}

	logout(ready_callback) {
		/*
		*  Call the logout API endpoint and remove session
		*  data cookies. ready_callback is called when the
		*  logout is successfully finished.
		*/
		this.call(
			this.ENDP.AUTH_LOGOUT,
			null,
			(resp) => {
				if (resp.error == this.ERR.API_E_OK) {
					// Remove session data cookies.
					this.session_remove();
				} else {
					console.error("API: Logout failed.");
				}
				if (ready_callback) {
					ready_callback(resp);
				}
			}
		);
	}
}
