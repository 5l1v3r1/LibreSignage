var assert = require('ls-assert');
var APIEndpoints = require('./endpoints').APIEndpoints;

class APIError extends Error{
	constructor(code, msg, file, line) {
		super(msg, file, line);
		if (Error.captureStackTrace) {
			Error.captureStackTrace(this, APIError);
		}
		this.code = code;
		if (this.code in APIError.messages) {
			this.message = APIError.messages[this.code].short + ' - ' +
						APIError.messages[this.code].long +
						(this.message ? ' (' + msg + ')' : '');
		} else {
			this.message = 'Unknown API error. ' +
						(this.message ? ' (' + msg + ')' : '');
		}
	}

	static err(name) {
		/*
		*  Get the integer error code for the error 'name'. This function
		*  is not normally needed, but it should be used in code where
		*  the error codes may not have been loaded yet. If the error
		*  'name' is not found, -1 is returned.
		*/
		return name in APIError.codes ? APIError.codes[name] : -1
	}

	static async init(api) {
		/*
		*  Initialize the API error system.
		*/
		if (!APIError.inited) {
			let tmp = {};
			tmp.codes = await api.call(
				APIEndpoints.API_ERR_CODES,
				null
			);
			tmp.messages = await api.call(
				APIEndpoints.API_ERR_MSGS,
				null
			);
			APIError.codes = tmp.codes;
			APIError.messages = tmp.messages;
			APIError.inited = true;
		}
	}
}
APIError.codes    = [];
APIError.messages = [];
APIError.inited   = false;
exports.APIError  = APIError;

