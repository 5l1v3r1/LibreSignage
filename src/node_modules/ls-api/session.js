var cookie = require('ls-cookie');
var User = require('ls-user').User;
var assert = require('ls-assert').assert;
var APIEndpoints = require('./endpoints.js').APIEndpoints;
var APIError = require('./error.js').APIError;

class APISession {
	constructor(api, standalone) {
		/*
		*  Create a new APISession object.
		*    * api        = An initialized APIInterface object.
		*    * standalone = Whether this code is being run in a
		*                   standalone environment or not. (boolean)
		*/
		this.api = api;
		this.standalone = standalone;
		this.user = null;
		this.data = null;
		this.renew_interval_id = null;
	}

	async logout() {
		assert(this.user !== null);
		assert(this.data !== null);

		await this.api.call(APIEndpoints.AUTH_LOGOUT, null);
		this.remove();
	}

	async login(user, pass, permanent) {
		let resp = await this.api.call(
			APIEndpoints.AUTH_LOGIN,
			{
				username: user,
				password: pass,
				permanent: permanent,
				who: 'LibreSignage-Web-Interface'
			}
		);
		this.data = resp.session;

		/*
		*  Don't move this. this.data needs to be populated
		*  before User.load() works, since it uses the
		*  APIInterface.call() function. That in turn needs
		*  authentication info from this session object.
		*/
		this.user = new User(this.api);
		await this.user.load(null);
		await this.init_session_renewal_loop();
	}

	remove() {
		/*
		*  Remove all session related cookies and data.
		*  *This function does not logout from the API.*
		*/
		this.user = null;
		this.data = null;

		if (this.standalone === false) {
			cookie.rm_cookie({"session_token": "", "path": "/"});
			cookie.rm_cookie({"session_created": "", "path": "/"});
			cookie.rm_cookie({"session_max_age": "", "path": "/"});
			cookie.rm_cookie({"session_permanent": "", "path": "/"});
		}
	}

	async reload() {
		/*
		*  Reload a session from cookie data. This function
		*  can only be used when the constructor was called
		*  with standalone = false (ie. in browser code).
		*
		*  This function returns true if a session was reloaded
		*  and false otherwise.
		*/
		assert(
			this.standalone === false,
			"Can't use Session.reload() in a non-browser context."
		);
		if (
			cookie.cookie_exists('session_token')
			&& cookie.cookie_exists('session_created')
			&& cookie.cookie_exists('session_max_age')
		) {
			let resp = null;

			/*
			*  Add the session token to this.data to
			*  make APIInterface.call() authentication work.
			*/
			this.data = {token: cookie.get_cookie('session_token')};
			try {
				resp = await this.api.call(
					APIEndpoints.AUTH_GET_DATA,
					null
				);
			} catch (e) {
				if (
					e instanceof APIError
					&& e.code === APIError.err('API_E_NOT_AUTHORIZED')
				) {
					console.log('APISession: Invalid session cookies.');
					this.remove();
					return false;
				} else {
					throw e;
				}
			}

			this.user = new User(this.api);
			await this.user.load(null);

			// Don't overwrite this.data.token.
			Object.assign(this.data, resp.session);
			await this.init_session_renewal_loop();

			return true;
		} else {
			this.remove();
			return false;
		}
	}

	async init_session_renewal_loop() {
		/*
		*  Initialize a new session renewal loop. This function
		*  automatically stops any previous loops to make sure
		*  multiple simultaneous loops are never running.
		*/
		let t = this.data.max_age
				- APISession.MIN_MAX_AGE
				+ APISession.MAX_AGE_HEADROOM;

		if (this.data.permanent === true) { return; }
		if (this.data.max_age < APISession.MIN_MAX_AGE) {
			throw new APIError({
				error: APIError.err('API_E_CLIENT'),
				e_msg: `Maximum session age too low! ` +
					`(MAX_AGE < ${APISession.MIN_MAX_AGE}s)`
			});
		}
		console.log(`APIInterface: Init session renewal loop. (${t}s)`);

		this.stop_session_renewal_loop();
		await this.renew();

		/*
		*  Start the renewal loop. Add 10s to the renew interval
		*  to make sure too fast loops aren't created when
		*  max_age ==> APISession.RENEWAL_HEADROOM.
		*/
		this.renew_interval_id = setInterval(
			async () => await this.renew(),
			t*1000
		);
	}

	stop_session_renewal_loop() {
		/*
		*  Stop the currently running session renewal loop.
		*/
		if (this.renew_interval_id != null) {
			console.log('APISession: Stop session renewal loop.');
			clearInterval(this.renew_interval_id);
			this.renew_interval_id = null;
		}
	}

	async renew() {
		let resp = null;
		if (this.is_permanent() || this.is_orphan()) { return; }

		console.log('APIInteface: Renew session.');
		try {
			resp = await this.api.call(
				APIEndpoints.AUTH_SESSION_RENEW,
				null
			);
		} catch (e) {
			this.remove();
			throw e;
		}
		Object.assign(this.data, resp.session);

		if (this.is_orphan()) {
			console.log('APISession: Tried to renew an orphan session.');
		}
	}

	get_user()          { return this.user;                 }
	get_id()            { return this.data.id;              }
	get_who()           { return this.data.who;             }
	get_from()          { return this.data.from;            }
	get_orphan_master() { return this.data.orphan_master;   }
	is_orphan()         { return this.data.orphan !== null; }
	is_permanent()      { return this.data.permanent;       }

	/*
	*  The following getter functions return data from this.data if
	*  this.standalone == true. Otherwise the value from the corresponfing
	*  'session_*' cookie is returned. This is done to prevent problems with
	*  multiple tabs renewing sessions simultaneously, which in turn results
	*  in differing values in this.data and 'session_*' cookies.
	*/
	get_created()   {
		if (this.standalone) {
			return this.data.created;
		} else {
			return cookie.get_cookie('session_created');
		}
	}

	get_max_age()   {
		if (this.standalone) {
			return this.data.max_age;
		} else {
			return cookie.get_cookie('session_max_age');
		}
	}

	get_permanent() {
		if (this.standalone) {
			return this.data.permanent;
		} else {
			return cookie.get_cookie('session_permanent');
		}
	}

	get_token()     {
		if (this.standalone) {
			return this.data.token;
		} else {
			return cookie.get_cookie('session_token');
		}
	}
}
APISession.MIN_MAX_AGE = 30;
APISession.MAX_AGE_HEADROOM = 10;
exports.APISession = APISession;
