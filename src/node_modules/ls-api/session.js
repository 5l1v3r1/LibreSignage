var cookie = require('ls-cookie');
var User = require('ls-user').User;
var assert = require('ls-assert').assert;
var APIEndpoints = require('./endpoints.js').APIEndpoints;
var APIError = require('./error.js').APIError;

class APISession {
	constructor(api, standalone) {
		/*
		*  Create a new APISession object.
		*    * api        = An initialized APIInterface object.
		*    * standalone = Whether this code is being run in a
		*                   standalone environment or not. (boolean)
		*/
		this.api = api;
		this.standalone = standalone;
		this.user = null;
		this.data = null;
	}

	async logout() {
		assert(this.user !== null);
		assert(this.data !== null);

		await this.api.call(APIEndpoints.AUTH_LOGOUT, null);
		this.remove();
	}

	async login(user, pass, permanent) {
		let resp = await this.api.call(
			APIEndpoints.AUTH_LOGIN,
			{
				username: user,
				password: pass,
				permanent: permanent,
				who: 'LibreSignage-Web-Interface'
			}
		);
		this.data = resp.session;

		/*
		*  Don't move this. this.data needs to be populated
		*  before User.load() works, since it uses the
		*  APIInterface.call() function. That in turn needs
		*  authentication info from this session object.
		*/
		this.user = new User(this.api);
		await this.user.load(null);

		this.schedule_renewal();
	}

	remove() {
		/*
		*  Remove all session related cookies and data.
		*  *This function does not logout from the API.*
		*/
		this.user = null;
		this.data = null;

		if (this.standalone === false) {
			cookie.rm_cookie({"session_token": "", "path": "/"});
			cookie.rm_cookie({"session_created": "", "path": "/"});
			cookie.rm_cookie({"session_max_age": "", "path": "/"});
			cookie.rm_cookie({"session_permanent": "", "path": "/"});
		}
	}

	async reload() {
		/*
		*  Reload a session from cookie data. This function
		*  can only be used when the constructor was called
		*  with standalone = false (ie. in browser code).
		*
		*  This function returns true if a session was reloaded
		*  and false otherwise.
		*/
		assert(
			this.standalone === false,
			"Can't use Session.reload() in a non-browser context."
		);
		if (
			cookie.cookie_exists('session_token')
			&& cookie.cookie_exists('session_created')
			&& cookie.cookie_exists('session_max_age')
		) {
			let resp = null;

			/*
			*  Add the session token to this.data to
			*  make APIInterface.call() authentication work.
			*/
			this.data = {token: cookie.get_cookie('session_token')};
			try {
				resp = await this.api.call(
					APIEndpoints.AUTH_GET_DATA,
					null
				);
			} catch (e) {
				if (
					e instanceof APIError
					&& e.code === APIError.err('API_E_NOT_AUTHORIZED')
				) {
					console.log('Session: Invalid session cookies.');
					this.remove();
					return false;
				} else {
					throw e;
				}
			}

			this.user = new User(this.api);
			await this.user.load(null);

			// Don't overwrite this.data.token.
			Object.assign(this.data, resp.session);

			this.schedule_renewal();
			return true;
		} else {
			this.remove();
			return false;
		}
	}

	schedule_renewal() {
		if (this.data.permanent === true) { return; }

		let created = this.data.created;
		let max_age = this.data.max_age;
		let left    = created + max_age - Math.round(Date.now()/1000);
		let t       = left - APISession.RENEWAL_HEADROOM;

		if (max_age <= APISession.RENEWAL_HEADROOM + 10) {
			throw new APIError({
				error: APIError.err('API_E_CLIENT'),
				e_msg: `Maximum session age too low! Should be` +
						`*at least* ${APISession.RENEWAL_HEADROOM + 10}` +
						` seconds.`
			});
		}

		if (left <= 0) {
			console.log('APISession: Session has expired.');
			this.remove();
		} else if (t <= 0) {
			console.log('APISession: Renewing now.');
			this.renew();
		} else {
			console.log(`APISession: Renew in ${t} seconds.`);
			setTimeout(async () => { await this.renew(); }, t*1000);
		}
	}

	async renew() {
		let resp = null;
		try {
			resp = await this.api.call(
				APIEndpoints.AUTH_SESSION_RENEW,
				null
			);
		} catch (e) {
			console.log('APISession: Renewal failed.');
			this.remove();
			throw e;
		}
		this.data = resp.session;
		console.log('APISession: Renewal complete.');
		this.schedule_renewal();
	}

	get_user()      { return this.user;           }
	get_id()        { return this.data.id;        }
	get_who()       { return this.data.who;       }
	get_from()      { return this.data.from;      }
	get_created()   { return this.data.created;   }
	get_max_age()   { return this.data.max_age;   }
	get_permanent() { return this.data.permanent; }
	get_token()     { return this.data.token;     }
}
APISession.RENEWAL_HEADROOM = 30;
exports.APISession = APISession;
