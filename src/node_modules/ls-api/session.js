var cookie = require('ls-cookie');
var assert = require('ls-assert').assert;
var APIEndpoints = require('./endpoints.js').APIEndpoints;

class APISession {
	constructor(api, standalone) {
		/*
		*  Create a new APISession object.
		*    * api        = An initialized APIInterface object.
		*    * standalone = Whether this code is being run in a
		*                   standalone environment or not (boolean).
		*/
		this.api = api;
		this.standalone = standalone;
		this.user = null;
		this.data = null;
	}

	async logout() {
		assert(this.user !== null);
		assert(this.data !== null);

		await this.api.call(APIEndpoints.AUTH_LOGOUT, null);
		this.user = null;
		this.data = null;
	}

	async login(user, pass, permanent) {
		console.log('endpoints: ' + APIEndpoints);
		let resp = await this.api.call(
			APIEndpoints.AUTH_LOGIN,
			{
				username: user,
				password: pass,
				permanent: permanent,
				who: 'LibreSignage-Web-Interface'
			}
		);
		this.user = resp.user;
		this.data = resp.session;
	}

	remove_cookies() {
		/*
		*  Remove all session related cookies.
		*/
		assert(
			this.standalone === false,
			"Can't use Session.remove_cookies() in a " +
			"non-browser context."
		);

		cookie.rm_cookie({"session_token": "", "path": "/"});
		cookie.rm_cookie({"session_created": "", "path": "/"});
		cookie.rm_cookie({"session_max_age": "", "path": "/"});
		cookie.rm_cookie({"session_permanent": "", "path": "/"});
	}

	async cookie_reload() {
		/*
		*  Reload a session from cookie data. This function
		*  can only be used when the constructor was called
		*  with standalone = false (ie. in browser code).
		*/
		assert(
			this.standalone === false,
			"Can't use Session.cookie_reload() in " +
			"a non-browser context."			
		);
		if (
			cookie.cookie_exists('session_token')
			&& cookie.cookie_exists('session_created')
			&& cookie.cookie_exists('session_max_age')
		) {
			try {
				let resp = await this.api.call(
					APIEndpoints.AUTH_GET_DATA,
					null
				);
				this.user = resp.user;
				this.data = resp.session;

				/*
				*  Add the session token to the data dict since
				*  it isn't returned by the AUTH_GET_DATA endpoint.
				*  This makes sure this.data has the same contents
				*  it has when created with Session.login().
				*/
				this.session.token = cookie.get_cookie(
					'session_token'
				);

				this.schedule_renewal();
			} catch (e) {
				if (e.code === APIError.codes.API_E_NOT_AUTHORIZED) {
					console.error('Session: Invalid cookies.');
					this.remove_cookies();				
				} else {
					throw e;
				}
			}
		} else {
			console.log('Session: No valid data found.');
			this.remove_cookies();
		}
	}

	schedule_renewal() {
		// todo
	}

	renew() {
		// todo
	}
}
exports.APISession = APISession;
