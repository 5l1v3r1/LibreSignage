var XMLHttpRequest = require('xmlhttprequest').XMLHttpRequest;
var cookie = require('ls-cookie');

var APIError = require('./error.js').APIError;
var APIEndpoints = require('./endpoints').APIEndpoints;
var APISession = require('./session.js').APISession;

class APIInterface {
	constructor(config) {
		/*
		*  Create a new APIInterface object. You can pass the
		*  following config values in 'config':
		*    * standalone = Is this code run standalone (in Node)?
		*    * host       = API hostname.
		*  Remember to call APIInterface.init() after constructing
		*  the object.
		*/
		this.config = Object.assign({
			standalone: false,
			session: null,
			host: '',
			ver: {}
		}, config);
		this.limits = null;
	}

	async call(endpoint, data) {
		/*
		*  Call an API endpoint.
		*    * endpoint = One of the API endpoints defined in
		*                 the endpoints.js file.
		*    * data     = The data to send to the endpoint.
		*/
		return new Promise((resolve, reject) => {
			let req = new XMLHttpRequest();
			let conf = {
				'ctype': null,
				'data': null,
				'url': `${this.config.host}/${endpoint.uri}`
			};

			req.addEventListener("load", function() {
				let tmp = null;
				switch(this.getResponseHeader('Content-Type')) {
					case 'application/json':
						tmp = JSON.parse(this.responseText);
						if (tmp.error) {
							reject(new APIError(tmp));
						} else {
							resolve(tmp);
						}
						break;
					default:
						resolve(this.responseText);
						break;
				}
			});
			req.addEventListener("error", function() {
				reject(new APIError({
					error: APIError.err('API_E_CLIENT'),
					e_msg: this.statusText
				}));
			});
			req.addEventListener("aborted", function() {
				reject(new Error({
					error: APIError.err('API_E_CLIENT'),
					e_msg: 'Canceled by user.'
				}));
			});

			if (endpoint.method === 'POST') {
				conf.ctype = endpoint.req_mime;
				switch(endpoint.req_mime) {
					case 'application/json':
						conf.data = JSON.stringify(data);
						break;
					case 'application/x-www-form-urlencoded':
					case 'multipart/form-data':
						conf.data = data;
						break;
					default:
						reject(new APIError({
							error: APIError.err('API_E_CLIENT'),
							e_msg: 'Invalid endpoint MIME '
									+ endpoint.req_mime
						}));
						break;
				}
			} else if (endpoint.method === 'GET') {
				conf.url += '?' + APIInterface.querify(data);
			} else {
				reject(new APIError({
					error: APIError.err('API_E_CLIENT'),
					e_msg: `Invalid endpoint method ${endpoint.method}.`
				}));
			}

			req.open(endpoint.method, conf.url);

			if (conf.ctype !== null) {
				req.setRequestHeader('Content-Type', conf.ctype);
			}

			if (endpoint.auth) {
				if (this.config.session === null) {
					reject(new APIError({
						error: APIError.err('API_E_NOT_AUTHORIZED'),
						e_msg: 'Not authenticated.'
					}));
				}
				req.setRequestHeader(
					'Auth-Token',
					this.config.session.data.token
				);
			}
			req.send(conf.data);
		});
	}

	static querify(v) {
		/*
		*  Convert the dictionary 'v' into a URL query string.
		*  If 'v' === null, an empty string is returned.
		*/
		if (v === null) { return ''; }
		return Object.keys(v).map(
			(k) => {
				return encodeURIComponent(k) + '=' +
				encodeURIComponent(v[k]);
			}
		).join('&');
	}

	async login(user, pass, permanent) {
		this.config.session = new APISession(
			this,
			this.config.standalone
		);
		try {
			await this.config.session.login(user, pass, permanent);
		} catch (e) {
			this.config.session = null;
			throw e;
		}
	}

	async logout() {
		await this.config.session.logout();
		this.config.session = null;
	}

	async init() {
		/*
		*  Initialize the API object. You must call this function
		*  after constructing the object and before calling any
		*  other APIInterface function.
		*/
		let resp = null;
		await APIError.init(this);

		resp = await this.call(APIEndpoints.SERVER_LIMITS, null);
		this.limits = resp.limits;

		resp = await this.call(APIEndpoints.VER_INFO, null);
		this.config.ver.ls = resp.ls;
		this.config.ver.api = resp.api;

		if (this.config.standalone === false) {
			this.config.session = new APISession(this, false);
			try {
				resp = await this.config.session.reload();
			} catch (e) {
				console.warn(
					`APIInterface: Failed to reload ` +
					`session. (${e.response.e_msg})`
				);
				this.config.session = null;
				return;
			}
			if (resp === false) { this.config.session = null; }
		}
	}
}
exports.APIInterface = APIInterface;
