var XMLHttpRequest = require('xmlhttprequest').XMLHttpRequest;
var $ = require('jquery');
var cookie = require('ls-cookie');

var APIError = require('./error.js').APIError;
var APIEndpoints = require('./endpoints').APIEndpoints;
var APISession = require('./session.js').APISession;

class APIInterface {
	constructor(config) {
		this.config = Object.assign({
			standalone: false,
			session: null,
			host: '',
			ver: {}
		}, config);
		this.limits = null;
	}

	async call(endpoint, data) {
		return new Promise((resolve, reject) => {
			let req = new XMLHttpRequest();
			let req_content_type = null;
			let req_data = null;

			req.addEventListener("load", function() {
				let tmp = null;
				switch(this.getResponseHeader('Content-Type')) {
					case 'application/json':
						tmp = JSON.parse(this.responseText);
						if (tmp['error']) {
							reject(new APIError(tmp['error']));
						} else {
							resolve(tmp);
						}
						break;
					default:
						resolve(this.responseText);
						break;
				}
			});
			req.addEventListener("error", function() {
				reject(new APIError(
					APIError.err('API_E_CLIENT'),
					this.statusText
				));
			});
			req.addEventListener("aborted", function() {
				reject(new Error(
					APIError.err('API_E_CLIENT'),
					'Canceled by user.'
				));
			});

			if (endpoint.method === 'POST') {
				req_content_type = endpoint.req_mime;
				switch(endpoint.req_mime) {
					case 'application/json':
						req_data = JSON.stringify(data);
						break;
					case 'application/x-www-form-urlencoded':
					case 'multipart/form-data':
						req_data = data;
						break;
					default:
						reject(new APIError(
							APIError.err('API_E_CLIENT'),
							`Invalid endpoint MIME ${endpoint.req_mime}.`
						));
						break;
				}
			} else if (endpoint.method === 'GET') {
				req_data = data;
			} else {
				reject(new Error(
					APIError.err('API_E_CLIENT'),
					`Invalid endpoint method ${endpoint.method}.`
				))
			}

			req.open(
				endpoint.method,
				`${this.config.host}/${endpoint.uri}`
			);

			if (req_content_type !== null) {
				req.setRequestHeader('Content-Type', req_content_type);
			}

			if (endpoint.auth) {
				if (this.config.session === null) {
					reject(new APIError(
						APIError.err('API_E_NOT_AUTHORIZED'),
						'Not authenticated.'
					));
				}
				req.setRequestHeader(
					'Auth-Token',
					this.config.session.data.token
				);
			}

			req.send(req_data);
		});
	}

	async login(user, pass, permanent) {
		this.config.session = new APISession(this, this.config.standalone);
		this.config.session.login(user, pass, permanent);
	}

	async logout() {
		this.config.session.logout();
		this.config.session = null;
	}

	async init() {
		let resp = null;

		await APIError.init(this);

		resp = await this.call(APIEndpoints.SERVER_LIMITS, null);
		this.limits = resp.limits;

		resp = await this.call(APIEndpoints.VER_INFO, null);
		this.config.ver.ls = resp.ls;
		this.config.ver.api = resp.api;

		if (this.standalone === false) {
			this.config.session = new APISession(this, false);
			this.config.session.cookie_reload();
		}
	}
}
exports.APIInterface = APIInterface;
