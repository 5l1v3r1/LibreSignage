/**
* Error codes for MarkupErrors.
*/
var ERROR_CODES = {
	'EEOL': {
		code: 0,
		msg: 'Unexpected End Of File'
	},
	'ETOK': {
		code: 1,
		msg: 'Unexpected token'
	},
	'ESYN': {
		code: 2,
		msg: 'Invalid syntax'
	},
	'EEXP': {
		code: 3,
		msg: 'Invalid expression'
	},
	'ETAG': {
		code: 4,
		msg: 'Unknown tag'
	},
	'ETYPE': {
		code: 5,
		msg: 'Type error'
	},
	'EARG': {
		code: 6,
		msg: 'Argument error'
	},
	'EVAL': {
		code: 7,
		msg: 'Value error'
	},
	'EINP': {
		code: 8,
		msg: 'Unexpected input'
	}
};

/**
* Main MarkupError class.
*
* @memberof libresignage/markup
*/
class MarkupError extends Error {
	/**
	* Get an error code by the abbreviation.
	*
	* @param {string} abbrev The abbreviation.
	*
	* @return {number} The matching code.
	*/
	static code_by_abbrev(abbrev) {
		return ERROR_CODES[abbrev].code;
	}

	/**
	* Get an error message by the abbreviation.
	*
	* @param {string} abbrev The abbreviation.
	*
	* @return {string} The matching message.
	*/
	static msg_by_abbrev(abbrev) {
		return ERROR_CODES[abbrev].msg;
	}

	/**
	* Get an error message by the code.
	*
	* @param {number} code The code.
	*
	* @return {string} The matching message.
	*/
	static msg_by_code(code) {
		for (let e of ERROR_MESSAGES) {
			if (e.code == code) {
				return e.msg;
			}
		}
	}
};
module.exports = MarkupError;

