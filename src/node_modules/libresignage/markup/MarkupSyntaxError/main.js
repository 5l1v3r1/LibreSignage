var MarkupError = require('libresignage/markup/MarkupError');

/**
* A class representing a markup syntax error.
*
* @memberof libresignage/markup
*/
class MarkupSyntaxError extends MarkupError {
	/**
	* Construct a new MarkupSyntaxError.
	*
	* @param {number} code     One of the error codes defined in MarkupError.
	* @param {Lexeme} lexememe The Lexeme where the syntax error occured.
	* @param {string} message  A human readable error message.
	* @param {file}   string   Passed to the Error constructor.
	* @param {number} line     Passed to the Error constructor.
	*/
	constructor(code, lexeme, message, file, line) {
		super(message, file, line);
		if (Error.captureStackTrace) {
			Error.captureStackTrace(this, MarkupSyntaxError);
		}

		this.code = code;
		this.message = message;
		this.lexeme = lexeme;
	}

	line() { return this.lexeme.get_line_num(); }
	char() { return this.lexeme.get_line_pos(); }

	/**
	* Get a string representation of a MarkupSyntaxError.
	*
	* @param {number} ln_base A number to add to the reported line number.
	*/
	toString(ln_base) {
		let base = (!ln_base) ? 0: ln_base;
		let ret = `${this.code.msg}: ${this.message}`;

		if (this.lexeme) {
			ret +=
				` (@ ${base + this.lexeme.ln_num}:` +
				`${this.lexeme.ln_pos})`;
		}
		return ret;
	}
}
