/**
* Class representing a lexeme.
*
* @memberof module:libresignage/markup
*/
class Lexeme {
	/**
	* Construct a new Lexeme.
	*
	* @param {Token}  token   The Token corresponding to this Lexeme.
	* @param {string} raw    The raw string this Lexeme matched.
	* @param {number} ln_num The line number of this Lexeme.
	* @param {number} ln_pos The line position of this Lexeme.
	*/
	constructor(token, raw, ln_num, ln_pos) {
		this.token = token;
		this.raw = raw;
		this.ln_num = ln_num;
		this.ln_pos = ln_pos;
	}

	/**
	* Check whether Tokens of two Lexemes match.
	*
	* @param {Lexeme} lexeme The other lexeme.
	*
	* @return {boolean} True if tokens match, false otherwise.
	*/
	matches(lexeme) {
		return this.token.get_type() == lexeme.token.get_type();
	}

	/**
	* Change lexeme Token.
	*
	* @param {Token} token The new Token.
	*/
	ch_type(token) {
		this.token = token;
	}

	/**
	* Dump a Lexeme to console.
	*/
	dump() {
		console.log(
			`[@${this.ln_num}:${this.ln_pos}]` +
			`(${this.token.get_type()}, '${this.raw}')`
		);
	}

	/**
	* Make a clone of a Lexeme.
	*
	* @return {Lexeme} The cloned Lexeme.
	*/
	clone() {
		return new Lexeme(
			this.token,
			this.raw,
			this.ln_num,
			this.ln_pos
		);
	}

	/**
	* Get the Token object corresponding to a Lexeme.
	*
	* @return {Token} A Token object.
	*/
	get_token() {
		return this.token;
	}
}
module.exports = Lexeme;
