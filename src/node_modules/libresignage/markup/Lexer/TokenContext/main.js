/**
* A class that describes constraints on the context of a Token.
*
* @memberof module:libresignage/markup
*/
class TokenContext {
	/**
	* Construct a new TokenContext.
	*
	* @param {object} constraints
	*/
	constructor(constraints) {
		this.constraints = constraints;
	}

	get_constraints() {
		return this.constraints;
	}

	match(lexemes, start_index) {
		for (let i in this.get_constraints()) {
			let constraint = this.get_constraints()[i];
			let type = '';
			let invert = false;

			if (constraint.charAt(0) != '!') {
				// Normal matching.
				type = constraint;
				invert = false;
			} else {
				// Inverted matching.
				type = constraint.substring(1);
				invert = true;
			}

			let k = start_index + parseInt(i, 10);
			if (k < 0 && invert) {
				/*
				* Match index OOB, matching inverted
				* => may still match
				* => continue.
				*/
				continue;
			} else if (k < 0) {
				/*
				* Match index OOB, normal matching
				* => cannot match
				* => return false.
				*/
				return false;
			}

			let current_lexeme = null;
			if (!(k < 0 || k >= lexemes[k].length)) {
				current_lexeme = lexemes[k];
			}

			if ((current_lexeme.get_token().get_type() == type) == invert) {
				/*
				* Tokens match but matching is inverted
				* => cannot match
				* => return false.
				*/
				return false;
			}
		}
		return true;
	}
}
module.exports = TokenContext;
