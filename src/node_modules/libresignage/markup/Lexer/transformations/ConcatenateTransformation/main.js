var LexerTransformation = require('libresignage/markup/Lexer/LexerTransformation');

/**
* Subclass of LexerTransformation for concatenating Lexemes.
*
* @memberof module:libresignage/markup
*/
class ConcatenateTransformation extends LexerTransformation {
	/**
	* Construct a new ConcatenateTransformation.
	*
	* @see {@link module:libresignage/markup.LexerTransformation}
	*/
	constructor(type) {
		super(type);
	}

	/**
	* @see {@link module:libresignage/markup.LexerTransformation#transform}
	*/
	transform(lexemes) {
		let buf = null;
		let ret = [];

		for (let l of lexemes) {
			if (l.get_token().get_type() === this.type) {
				if (!buf) {
					buf = l.clone();
				} else {
					buf.set_raw(buf.get_raw() + l.get_raw());
				}
			} else {
				if (buf) {
					ret.push(buf);
					buf = null;
				}
				ret.push(l);
			}
		}

		/*
		* Push the last buffer to ret if 'lexemes' only
		* contained Lexemes of type this.type,
		*/
		if (buf) { ret.push(buf); }

		return ret;
	}
}
module.exports = ConcatenateTransformation;
