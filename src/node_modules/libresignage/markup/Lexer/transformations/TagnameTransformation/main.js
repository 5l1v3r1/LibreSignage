var LexerTransformation = require('libresignage/markup/Lexer/LexerTransformation');
var LexerTokenDefs = require('libresignage/markup/Lexer/LexerTokenDefs');

/**
* Subclass of LexerTransformation for concatenating Lexemes.
*
* @memberof module:libresignage/markup
*/
class TagnameTransformation extends LexerTransformation {
	/**
	* Construct a new TagnameTransformation.
	*
	* @see {@link module:libresignage/markup.LexerTransformation}
	*/
	constructor(type) {
		super(type);
	}

	/**
	* @see {@link module:libresignage/markup.LexerTransformation#transform}
	*/
	transform(lexemes) {
		let ret = lexemes.slice();

		for (let i = 0; i < ret.length; i++) {
			if (ret[i].get_token().get_type() == 'BRACK_OPEN') {
				if (
					ret.length - 1 >= i + 1
					&& ret[i + 1].get_token().get_type() == 'LITERAL'
				) {
					ret[i + 1].ch_type(LexerTokenDefs.get('TAGNAME'));
				} else if (
					ret.length - 1 >= i + 2
					&& ret[i + 1].get_token().get_type() == 'FORWARD_SLASH'
					&& ret[i + 2].get_token().get_type() == 'LITERAL'
				) {
					ret[i + 2].ch_type(LexerTokenDefs.get('TAGNAME'));
				}
			}
		}

		return ret;
	}
}
module.exports = TagnameTransformation;
