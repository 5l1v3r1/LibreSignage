/**
* Base class for Lexer postprocessor transformations.
*
* @memberof module:libresignage/markup
*/
class LexerTransformation {
	/**
	* Construct a new LexerTransformation.
	*
	* You cannot construct a LexerTransformation directly. You should
	* extend this class instead.
	*
	* @param {string} type The Token type this transformation operates on.
	*/
	constructor(type) {
		if (this.constructor === LexerTransformation) {
			throw new Error("Can't instantiate an abstract class.");
		}

		this.type = type;
	}

	/**
	* Transform a Lexeme array.
	*
	* You cannot call this method directly. You need to override it instead.
	*
	* @param {Lexeme[]} lexemes An array of lexemes to operate on.
	*
	* @return {Lexeme[]} A modified Lexeme array.
	*/
	transform(lexemes) {
		throw new Error("You should override this method.");
	}

	/**
	* Get the Token type a LexerTransformation operates on.
	*
	* @return {string} A Token type.
	*/
	get_type() {
		return this.type;
	}
}
module.exports = LexerTransformation;
