var Assert = require('assert');

/**
* A class representing a lexer token.
*
* @memberof module:libresignage/markup
*/
class Token {
	/**
	* Construct a new token.
	*
	* @param {string}         type     The type of the Token.
	* @param {RegExp}         regex    The regular expression used for the token.
	* @param {string}         repr     The string representation of the token.
	* @param {TokenContext[]} contexts Token context constraints.
	* @param {boolean}        nomatch  Don't match this token automatically.
	*/
	constructor(type, regex, repr, contexts, nomatch=false) {
		Assert.ok(contexts, "Token must have at least one context.");

		this.type = type;
		this.regex = regex;
		this.repr = repr;
		this.contexts = contexts;
		this.nomatch = nomatch;
	}

	get_type() { return this.type; }
	get_regex() { return this.regex; }
	get_repr() { return this.repr; }
	get_contexts() { return this.contexts; }
	should_match() { return !this.nomatch; }

	/**
	* Match a Token against a string.
	*
	* @param {string} str   The source string.
	* @param {number} index An index in 'str' to match from.
	*
	* @return {string|null} The matched substring or null for no match.
	*/
	match_regex(str, index) {
		if (!this.should_match()) { return null; }

		let ret = null;
		for (let regex of this.get_regex()) {
			ret = str.substring(index).match(regex);
			if (ret) { return ret[0]; }
		}

		return null;
	}
}
module.exports = Token;
